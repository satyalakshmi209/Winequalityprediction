# -*- coding: utf-8 -*-
"""winequalityprediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WaJXpxsoBZiawaDM5kY4XZA-mbEunpQI
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import GridSearchCV

# Load the dataset from a CSV file provided by the user
file_path = input("Enter the path to the CSV file: ")
df = pd.read_csv(file_path)

# Display the first few rows of the dataset
print(df.head())

# Check for missing values
print(df.isnull().sum())

# Display summary statistics
print(df.describe())

# Plot histograms for each feature
df.hist(bins=15, figsize=(15, 10))
plt.show()

# Check the distribution of the target variable (quality)
sns.countplot(x='quality', data=df)
plt.title('Distribution of Wine Quality')
plt.show()

# Display the correlation matrix
correlation_matrix = df.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Correlation Matrix')
plt.show()

# Split the data into features and target variable
X = df.drop(columns='quality')
y = df['quality']

# Scale the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import GridSearchCV

# Initialize the Gradient Boosting Classifier
gbm_model = GradientBoostingClassifier()

# Fit the model to the training data
gbm_model.fit(X_train, y_train)

# Predict the outcomes on the test set
gbm_predictions = gbm_model.predict(X_test)

# Accuracy
accuracy = accuracy_score(y_test, gbm_predictions)
print("Gradient Boosting Accuracy:", accuracy)

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, gbm_predictions)
print("Confusion Matrix:")
print(conf_matrix)

# Classification Report
class_report = classification_report(y_test, gbm_predictions)
print("Classification Report:")
print(class_report)

# Plot the confusion matrix
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

param_grid = {
    'n_estimators': [100, 200, 300],            # Number of boosting stages
    'learning_rate': [0.01, 0.1, 0.2],          # Step size for each iteration
    'max_depth': [3, 4, 5],                     # Maximum depth of the individual trees
    'min_samples_split': [2, 5, 10],            # Minimum number of samples required to split an internal node
    'min_samples_leaf': [1, 2, 4],              # Minimum number of samples required to be at a leaf node
    'subsample': [0.8, 1.0]                     # Fraction of samples used for fitting the individual base learners
}

# Initialize Gradient Boosting Classifier
gbm = GradientBoostingClassifier()

# Set up GridSearchCV
grid_search = GridSearchCV(
    estimator=gbm,
    param_grid=param_grid,
    cv=5,                                # 5-fold cross-validation
    scoring='accuracy',                  # Scoring metric
    n_jobs=-1,                           # Use all available cores
    verbose=2                            # Verbosity level
)

# Fit the model to the training data
grid_search.fit(X_train, y_train)

# Best parameters from Grid Search
print("Best Parameters:", grid_search.best_params_)

# Best cross-validation score
print("Best Cross-Validation Accuracy:", grid_search.best_score_)

# Use the best estimator to predict on the test set
best_model = grid_search.best_estimator_
test_predictions = best_model.predict(X_test)

# Evaluate the model on the test set
test_accuracy = accuracy_score(y_test, test_predictions)
print("Test Set Accuracy with Best Parameters:", test_accuracy)

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, test_predictions)
print("Confusion Matrix:")
print(conf_matrix)

# Classification Report
class_report = classification_report(y_test, test_predictions)
print("Classification Report:")
print(class_report)

